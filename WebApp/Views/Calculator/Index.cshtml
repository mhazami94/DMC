
@{
    ViewData["Title"] = "Calculator";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<section class="fx-section">
    <div class="fx-box">
        <div class="form-input-row">
            <div class="input-box-group">
                <label>
                    Alış / Satış
                </label>
                <select class="fx-input" id="calculatorType" asp-items="(SelectList)ViewBag.CalculatorType">
                </select>
            </div>
            <div class="input-box-group">
                <label>Parite Adı</label>
                <select class="fx-input" id="tips" asp-items="(SelectList)ViewBag.Tips">
                    <option value="">Seçiniz</option>
                </select>
            </div>
        </div>
        <div class="form-input-row">
            <div class="input-box-group">
                <label>
                    Kaldıraç
                </label>
                <select class="fx-input-count" id="lever">
                    <option value="1">1</option>
                    <option value="5">5</option>
                    <option value="10">10</option>
                    <option value="33">33</option>
                    <option value="50">50</option>
                    <option value="75">75</option>
                    <option value="100">100</option>
                </select>
                <label class="fx-input-count-lable">
                    veya
                </label>
                <input type="number" id="lever-other" class="fx-input-count-other" />
            </div>
            <div class="input-box-group">
                <label>Hacim Lot</label>
                <div class="fx-Hacim-input-box">
                    <input class="fx-input" max="100" value="1" min="1" id="rangeValue" />
                    <input type="range" id="myRange" min="1" value="1" max="100" class="" />
                </div>
            </div>
        </div>
        <div class="form-input-row">
            <div class="input-box-group">
                <label>
                    İşleme Giriş Fiyatı
                </label>
                <input class="fx-input" id="startPrice" />
            </div>
            <div class="input-box-group">
                <label>
                    Piyasa (Hedef) Fiyatı
                </label>
                <input class="fx-input" id="currentPrice" />
            </div>
        </div>

        <div class="sending-price">
            <a class="sending-price-link" href="#">
                Fiyatı Güncelle
            </a>
        </div>
        <div class="calculator-btn-box">
            <button id="calculator-btn" class="calculator-btn">HESAPLA</button>
        </div>
        <div class="calculator-result-section">
            <div class="calculator-result-box">
                <div class="calculator-result-row">
                    <div class="calculator-result-lable">
                        Gerekli Teminat
                    </div>
                    <div id="teminat" class="calculator-result-value">
                        : $
                    </div>
                </div>
                <div class="calculator-result-row">
                    <div class="calculator-result-lable">
                        Pips'lik Değişim
                    </div>
                    <div id="Pips" class="calculator-result-value">
                        : $
                    </div>
                </div>
                <div class="calculator-result-row">
                    <div class="calculator-result-lable">
                        Kâr / Zarar Tutarı
                    </div>
                    <div id="Zarar" class="calculator-result-value">
                        : $
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
@section Scripts{

}
<script>

    function getPrice() {
        var tip = document.getElementById("tips");
        var type = document.getElementById("calculatorType");
        if (tip.value != "" && type.value != "@Enums.CalculatorType.None") {
            $.get('/Calculaor/GetPrice', { tip: tip.value, type: type.value }, function (res) {
                document.getElementById("currentPrice").value = res;
            })
        }
    }
    document.getElementById("calculatorType").addEventListener("change", () => getPrice());
    document.getElementById("tips").addEventListener("change", () => getPrice());

    document.getElementById("calculator-btn").addEventListener("click", function () {
        calculate();
    });

    function calculate() {
        getTeminat();
        karZarar();
        pipslikDegisim();
    }
    function getTeminat() {
        var type = document.getElementById("calculatorType").value;
        var tip = document.getElementById("tips").value;
        var lever = document.getElementById("lever").value;
        var lever_other = document.getElementById("lever-other").value;
        var P1 = document.getElementById("currentPrice").value;
        var V = document.getElementById("rangeValue").value;

        var L;
        switch (tip) {
            case "XAUUSD": L = "100";
                break;
            case "XAGUSD": L = "5000";
                break;
            default: L = "100000";
        }
        var firstPortionOfParite = tip.slice(0, 3)
        var lastPortionOfParite = tip.slice(3, 6)
        var K;
        if (lever == "" && lever_other == "") {
            alert("Lütfen Kaldıraç Değeri Seçiniz veya Özel Bir Kaldıraç Değeri Giriniz");
            return false;
        }
        if (lever != "" && lever_other == "") {
            K = parseFloat(lever);
        }
        else if (lever == "" && lever_other != "") {
            K = parseFloat(lever_other);
        }
        else {
            alert("Lütfen Kaldıraç Değeri Seçiniz veya Özel Bir Kaldıraç Değeri Giriniz")
            return false;
        }
        var resultbox = document.getElementById("teminat");
        if (lastPortionOfParite == "USD") {
            var result = (P1 * V * L) / K;
            resultbox.innerText = ": " + result + "$";
        }
        else if (firstPortionOfParite == "USD") {
            var result = V * L / K;
            resultbox.innerText = ": " + result + "$";
        } else {
            $.get('/Calculaor/GetTeminat', { type: type, unit: lastPortionOfParite, range: V, L: L, K: K }, function (d) {
                resultbox.innerText = ": " + d + "$";
            });
        }
        setTimeout(function () { getTeminat(); }, 5000);
    }

    function karZarar() {
        var type = document.getElementById("calculatorType").value;
        var tip = document.getElementById("tips").value;
        var K = document.getElementById("lever").value;
        var Ko = document.getElementById("lever-other").value;
        var P1 = document.getElementById("startPrice").value;
        var P2 = document.getElementById("currentPrice").value;
        var V = document.getElementById("rangeValue").value;

        var L;

        if (P2 == "" || P1 == "")
            return false;

        switch (tip) {
            case "XAUUSD": L = "100";
                break;
            case "XAGUSD": L = "5000";
                break;
            default: L = "100000";
        }

        var firstPortionOfParite = tip.slice(0, 3);
        var lastPortionOfParite = tip.slice(3, 6);
        var resultbox = document.getElementById("Zarar");

        if (lastPortionOfParite == "USD") {
            if (type == "@Enums.CalculatorType.Buy")
                resultbox.innerText = V * L * (P2 - P1);
            if (type == "@Enums.CalculatorType.Sell")
                resultbox.innerText = V * L * (P1 - P2);
        } else if (firstPortionOfParite == "USD") {
            if (type == "@Enums.CalculatorType.Buy")
                resultbox.innerText = V * L * (P2 - P1) / P2;
            if (type == "@Enums.CalculatorType.Sell")
                resultbox.innerText = V * L * (P1 - P2) / P2;
        } else {
            $.get('/Calculaor/GetZarar', { type: type, unit: lastPortionOfParite, range: V, L: L, P1: P1, P2: P2 }, function (d) {
                resultbox.innerText = ": " + d + "$";
            });
        }
    }


    function pipslikDegisim() {
        var type = document.getElementById("calculatorType").value;
        var tip = document.getElementById("tips").value;
        var K = document.getElementById("lever").value;
        var Ko = document.getElementById("lever-other").value;
        var P1 = document.getElementById("startPrice").value;
        var V = document.getElementById("rangeValue").value;

        var L;
        switch (tip) {
            case "XAUUSD": L = "100";
                break;
            case "XAGUSD": L = "5000";
                break;
            default: L = "100000";
        }

        var Pip;
        switch (tip) {
            case "XAUUSD": Pip = "0.01";
                break;
            case "XAGUSD": Pip = "0.0001";
                break;
            case "USDJPY":
            case "EURJPY":
            case "CADJPY":
            case "GBPJPY":
            case "AUDJPY":
            case "CHFJPY":
            case "USDHUF":
            case "EURHUF":
            case "NZDJPY": Pip = "0.01";
                break;
            default: Pip = "0.0001";
        }

        var firstPortionOfParite = tip.slice(0, 3);
        var lastPortionOfParite = tip.slice(3, 6);
        var resultbox = document.getElementById("Pips");
        if (lastPortionOfParite == "USD") {
            resultbox.innerText = V * L * Pip;
        } else {
            $.get('/Calculaor/GetPip', { type: type, unit: lastPortionOfParite, range: V, L: L, Pip: Pip }, function (d) {
                resultbox.innerText = ": " + d + "$";
            });
        }
    }

    document.getElementById("myRange").addEventListener("input", function () {
        document.getElementById("rangeValue").value = this.value;
    });
    document.getElementById("rangeValue").addEventListener("input", function () {
        document.getElementById("myRange").value = this.value;
    });

</script>